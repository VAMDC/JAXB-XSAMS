package org.vamdc.xsams.common;

import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlTransient;

import org.vamdc.xsams.common.DataListType;

/**
Autogenerated customizeable class for user's handy methods
*/
public class TabulatedDataType extends org.vamdc.xsams.schema.TabulatedDataType {
	
	public TabulatedDataType(){
		super();
	}


	@XmlTransient
	private Integer dimension;	//Our data type dimension
	
	
	/**
	 * Constructor defining dimensions
	 * @param CoordsUnits String array containing units for axes, last element is unit for values
	 */
	public TabulatedDataType(String... CoordsUnits){
		super();
		String[] arguments = CoordsUnits;
		init (arguments);
	}
	
	
	/**
	 * Constructor from collection
	 * @param columns
	 */
	public TabulatedDataType(Collection<String> columns) {
		super();
		String[] arguments = columns.toArray(new String[0]);
		init (arguments);
	}

	
	/**
	 * Check table and return it only if it is consistent.
	 * @return table if it's OK, null otherwise.
	 */
	public TabulatedDataType getCheckedTable(){
		if (checkTable())
			return this;
		else 
			return null;
	}
	
	/**
	 * Check if table is consistent.
	 * @return true if all dimensions column lengths are equal to values column length.
	 */
	public boolean checkTable(){
		Integer length = this.getY().getDataList().getCount();
		for (Integer i = 0;i<dimension;i++){
			if (length != this.getXS().get(i).getDataList().getCount()) return false;
		}
		return true;
	}
	
	/**
	 * Set description attribute for all dimensions and values column.
	 * @param params last element for value, all previous for dimension coordinates
	 * @return 0 if set successfully
	 */
	public int setDescription(String... desc){
		//Check if we have correct amount of arguments passed.
		if (desc.length != dimension+1){
			return 1;
		}
		//Set all dimension descriptions
		for (Integer i = 0;i<dimension;i++){
			this.getXS().get(i).setDataDescription(desc[i]);
		}
		//Set value description
		this.getY().setDataDescription(desc[dimension]);
		
		return 0;
	}
	
	/**
	 * Set parameter attribute for all dimensions and values column.
	 * @param params last element for value, all previous for dimension coordinates
	 * @return 0 if set successfully
	 */
	public int setParameter(String... params){
		//Check if we have correct amount of arguments passed.
		if (params.length != dimension+1){
			return 1;
		}
		//Set all dimension parameters
		for (Integer i = 0;i<dimension;i++){
			this.getXS().get(i).setParameter(params[i]);
		}
		//Set value parameter
		this.getY().setParameter(params[dimension]);
		
		return 0;
	}
	
	/**
	 * Add point to table
	 * @param values last element for value, all previous for dimension coordinates
	 * @return 0 if added successfully, 1 if argument length doesn't match DataXY dimensions, 2 if DataXY isn't consistent (not all columns added, for example)
	 */
	public int addPoint(Double... values){
		//Check if we have correct amount of arguments passed.
		if (values.length != dimension+1){
			return 1;
		}
		//Check if table is consistent
		if (!checkTable()) return 2; 
		//Set all dimensions
		for (Integer i = 0;i<dimension;i++){
			this.getXS().get(i).getDataList().getValues().add(values[i]);
		}
		//Set value
		this.getY().getDataList().getValues().add(values[dimension]);
		return 0;
	}	
	
	
	/**
	 * Add coordinate column
	 * @param column List of values
	 * @param index column index, index=dimension adds column for values
	 * @return 0 if added successfully
	 */
	public int addColumn(List<Double> column,int index){
		if (index==dimension){
			this.getY().getDataList().getValues().addAll(column);
		}else if (index<dimension && index>=0){
			this.getXS().get(index).getDataList().getValues().addAll(column);
		}else return 1;
		return 0;
	}
	
	/**
	 * Initialize table, define dimension labels.
	 * @param CoordsUnits
	 */
	private void init(String[] CoordsUnits){
		
		//Add units for all dimensions:
		dimension = CoordsUnits.length-1;
		for (Integer i = 0;i<dimension;i++){
			DataSeriesType mydttx = new DataSeriesType();
			DataListType dlt = new DataListType();
			mydttx.setDataList(dlt);
			mydttx.setUnits(CoordsUnits[i]);
			this.getXS().add(mydttx);
		}
		//Add units for values:
		DataSeriesType mydtty = new DataSeriesType();
		DataListType dlt = new DataListType();
		mydtty.setDataList(dlt);
		mydtty.setUnits(CoordsUnits[dimension]);
		this.setY(mydtty);
	}
	
	
}

