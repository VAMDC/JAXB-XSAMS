package org.vamdc.xsams;

import java.util.Collection;
import java.util.Iterator;

import org.vamdc.xsams.schema.SpeciesStateRefType;
import org.vamdc.xsams.schema.AtomType;
import org.vamdc.xsams.schema.EnvironmentType;
import org.vamdc.xsams.schema.FunctionType;
import org.vamdc.xsams.schema.MethodType;
import org.vamdc.xsams.schema.MoleculeType;
import org.vamdc.xsams.schema.ParticleType;
import org.vamdc.xsams.schema.SolidType;
import org.vamdc.xsams.schema.SourceType;
import org.vamdc.xsams.util.SpeciesInterface;
import org.vamdc.xsams.util.StateInterface;

/**
 * Describes all the additional methods of the root xsams element.
 * Currently is implemented as an extension of jaxb autogenerated class
 * future implementations may include stream reader/writer and disk-buffered library
 * 
 */

public interface XSAMSManager {
	
	/**
	 * Add a source element to the tree
	 * @param source source element with all data filled in
	 * @return sourceID of the added element
	 */
	public String addSource(SourceType source);

	/**
	 * Get a source for the specific sourceID
	 * @param sourceID identifier of the source record
	 * @return SourceType with all available child elements
	 */
	public SourceType getSource(String sourceID);
	
	/**
	 * Get an iterator through sources
	 * @return Iterator<SourceType>
	 */
	public Iterator<SourceType> getAllSources();
	
	
	
	/**
	 * Add a method element to the tree
	 * @param method method element with all data filled in
	 * @return methodID of the added element
	 */
	public String addMethod(MethodType method);

	/**
	 * Get a method for the specific methodID
	 * @param methodID identifier of the mehod record
	 * @return MethodType with all available child elements
	 */
	public MethodType getMethod(String methodID);
	
	/**
	 * Get an iterator through method
	 * @return Iterator<MethodType>
	 */
	public Iterator<MethodType> getAllMethods();
	
	
	/**
	 * Add a function element to document 
	 * @param function FunctionType with it's all child elements
	 * @return functionID
	 */
	public String addFunction(FunctionType function);
	
	/**
	 * Get function element by it's ID
	 * @param functionID
	 * @return
	 */
	public FunctionType getFunction(String functionID);
	
	/**
	 * Get iterator through all available function elements
	 * @return
	 */
	public Iterator<FunctionType> getAllFunctions();
	
	/**
	 * Add environment element
	 * @param env EnvironmentType element
	 * @return ID of added element
	 */
	public String addEnvironment(EnvironmentType env);
	
	/**
	 * Get an environment element
	 * @param envID Id of element
	 * @return Requested environment element, NULL if none present with such ID
	 */
	public EnvironmentType getEnvironment(String envID);
	
	/**
	 * Get an iterator through all EnvironmentType elements available
	 * @return
	 */
	public Iterator<EnvironmentType> getAllEnvironments();
	
	
	/**
	 * Add Species (molecule, atom, particle, solid), with or without it's states.
	 * @param species 
	 * @return ID of added species
	 */
	public String addElement(SpeciesInterface species);
	
	/**
	 * Get species by ID
	 * @param speciesID
	 * @return null if nothing corresponds to a given ID, AtomType or MoleculeType element otherwise.
	 */
	public SpeciesInterface getElement(String speciesID);
	
	/**
	 * Get all available atoms
	 * @return
	 */
	public Iterator<AtomType> getAllAtoms();
	
	/**
	 * Get all available molecules
	 * @return
	 */
	public Iterator<MoleculeType> getAllMolecules();
	
	/**
	 * Get all available particles
	 * @return
	 */
	public Iterator<ParticleType> getAllParticles();
	
	/**
	 * Get all available solids
	 * @return
	 */
	public Iterator<SolidType> getAllSolids();
	
	
	/**
	 * Add a state record(atomic or molecular)
	 * @param specieID species to add state to
	 * @param state State record (anything having stateID)
	 * @return stateID of added state, null if something went wrong.
	 */
	public String addState(String speciesID,StateInterface state);
	
	/**
	 * Add bunch of states to atom or molecule
	 * @param specieID species to add state to
	 * @param states collection of states
	 * @return count of actually added states
	 */
	public int addStates(String speciesID,Collection<? extends StateInterface> states);
	
	
	/**
	 * Get a specific state element by stateID: AtomicStateType, MolecularStateType, 
	 * ParticleType, SolidType
	 * @param stateID
	 * @return
	 */
	public StateInterface getState(String stateID);
	
	/**
	 * Get all states of an atom or a molecule
	 * @param speciesID 
	 * @return iterator over all given species's states
	 */
	public Iterator<?> getSpeciesStates(String speciesID);
	
	/**
	 * Get species reference by specieID
	 * @param stateID
	 * @return
	 */
	public SpeciesStateRefType getSpeciesRef(String speciesID);
	
	/**
	 * Get state and species reference by stateID
	 * @param stateID
	 * @return
	 */
	public SpeciesStateRefType getStateRef(String stateID);
	
	/**
	 * Add process record
	 * @param process CollisionalTransitionType, RadiativeTransitionType, NonRadiativeTransitionType
	 * @return true if added
	 */
	public boolean addProcess(Object process);
	
	
	
}
